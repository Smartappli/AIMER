name: UT_Common_Models_H

on:
  workflow_call:

concurrency:
  group: ut_common_models_h-${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow, github.event.pull_request.number) || github.workflow_ref }}
  cancel-in-progress: true

jobs:
  test-harcorenas-models:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: ⌛ rate 1
      shell: pwsh
      run: |
        # add random sleep since we run on fixed schedule
        sleep (get-random -max 1200)
        
        # get currently authenticated user rate limit info
        $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
    
        # if we don't have at least 100 requests left, wait until reset
        if ($rate.remaining -lt 350) {
            $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
            echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
            sleep $wait
            $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
            echo "Rate limit has reset to $($rate.remaining) requests"
        }
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: ⌛ rate 2
      shell: pwsh
      run: |
        # add random sleep since we run on fixed schedule
        sleep (get-random -max 1200)
        
        # get currently authenticated user rate limit info
        $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
    
        # if we don't have at least 100 requests left, wait until reset
        if ($rate.remaining -lt 350) {
            $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
            echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
            sleep $wait
            $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
            echo "Rate limit has reset to $($rate.remaining) requests"
        }
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Fl_common Models Hardcorenas
      run: |
        python manage.py test fl_common.tests.tests_models_hardcorenas

  test-hgnet-models:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: test-harcorenas-models
    steps:
    - name: ⌛ rate 1
      shell: pwsh
      run: |
        # add random sleep since we run on fixed schedule
        sleep (get-random -max 1200)
        
        # get currently authenticated user rate limit info
        $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
    
        # if we don't have at least 100 requests left, wait until reset
        if ($rate.remaining -lt 350) {
            $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
            echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
            sleep $wait
            $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
            echo "Rate limit has reset to $($rate.remaining) requests"
        }
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: ⌛ rate 2
      shell: pwsh
      run: |
        # add random sleep since we run on fixed schedule
        sleep (get-random -max 1200)
        
        # get currently authenticated user rate limit info
        $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
    
        # if we don't have at least 100 requests left, wait until reset
        if ($rate.remaining -lt 350) {
            $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
            echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
            sleep $wait
            $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
            echo "Rate limit has reset to $($rate.remaining) requests"
        }
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Fl_common Models Hgnet
      run: |
        python manage.py test fl_common.tests.tests_models_hgnet

  test-hrnet-models:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: test-hgnet-models
    steps:
    - name: ⌛ rate 1
      shell: pwsh
      run: |
        # add random sleep since we run on fixed schedule
        sleep (get-random -max 1200)
        
        # get currently authenticated user rate limit info
        $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
    
        # if we don't have at least 100 requests left, wait until reset
        if ($rate.remaining -lt 350) {
            $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
            echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
            sleep $wait
            $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
            echo "Rate limit has reset to $($rate.remaining) requests"
        }
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: ⌛ rate 2
      shell: pwsh
      run: |
        # add random sleep since we run on fixed schedule
        sleep (get-random -max 1200)
        
        # get currently authenticated user rate limit info
        $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
    
        # if we don't have at least 100 requests left, wait until reset
        if ($rate.remaining -lt 350) {
            $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
            echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
            sleep $wait
            $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
            echo "Rate limit has reset to $($rate.remaining) requests"
        }
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Fl_common Models Hrnet
      run: |
        python manage.py test fl_common.tests.tests_models_hrnet
