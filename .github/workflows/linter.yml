name: Linter

on: [push, pull_request]

concurrency:
  group: linter-${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow, github.event.pull_request.number) || github.workflow_ref }}
  cancel-in-progress: true

jobs:
  ruff-lint:
    name: Ruff Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Print the installed version
        run: echo "Installed uv version is ${{ steps.setup-uv.outputs.uv-version }}"

      - name: Install Python 3.13
        run: uv python install 3.13

      - uses: astral-sh/ruff-action@v3
        with:
          args: 'check --select ASYNC,C90,DJ,DTZ,E,F,I,NPY,PD,PERF,PT,RUF,SIM,UP,W --ignore E501,F401,F841 --output-format github --diff --exclude fl_client/migrations,fl_server/migrations'

  ruff-fix:
    name: Ruff Fixer
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Print the installed version
        run: echo "Installed uv version is ${{ steps.setup-uv.outputs.uv-version }}"

      - name: Install Python 3.13
        run: uv python install 3.13
  
      - uses: astral-sh/ruff-action@v3
        with:
          args: 'check --fix --ignore F841'

      - uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: 'style fixes by ruff'
          commit_options: '--no-verify --signoff'
          skip_checkout: true
          push_options: '--force'
          branch: 'black'

  flake8-lint:
    runs-on: ubuntu-latest
    name: Flake8
    steps:
      - name: Check out source repository
        uses: actions/checkout@v5
        
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Print the installed version
        run: echo "Installed uv version is ${{ steps.setup-uv.outputs.uv-version }}"

      - name: Install Python 3.13
        run: uv python install 3.13
          
      - name: flake8 Lint
        uses: py-actions/flake8@v2.3.0
        with:
          update-pip: "true"
          exclude: "manage.py,fl_client/migrations,fl_server/migrations,settings.py"
          ignore: "E501,F401,F841,I900,PIE786,S106,S311,TOR401,W503,W504"
          max-line-length: "80"
          plugins: "flake8-builtins flake8-commas flake8-errmsg flake8-fixme pep8-naming flake8-pie flake8-use-pathlib flake8-return flake8-type-checking flake8-todo flake8-tidy-imports flake8-bugbear flake8-django flake8-bandit TorchFix pandas-vet flake8-logging-format flake8-requirements"

  dj-lint:
    runs-on: ubuntu-latest
    name: Django Lint
    steps:
      - name: Check out source repository
        uses: actions/checkout@v5
      
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Print the installed version
        run: echo "Installed uv version is ${{ steps.setup-uv.outputs.uv-version }}"

      - name: Create virtualenv and install djlint
        run: |
          uv venv
          source .venv/bin/activate
          uv python install 3.13
          uv pip install djlint

      - name: Run djlint
        run: |
          source .venv/bin/activate
          djlint . --check
          djlint ./templates --extension=html --lint
          djlint ./templates --extension=html --reformat

  pylint:
    name: PyLint
    needs: [dj-lint,flake8-lint,ruff-lint]
    strategy:
      max-parallel: 15
      matrix:
        os: [macos-13, macos-14, macos-15, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, windows-2019, windows-2022]
        python-version: ["3.12", "3.13"]
        exclude:      
          - os: windows-2019
            python-version: "3.10"
          - os: windows-2022
            python-version: "3.10"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
        cache: 'pip'
    - name: Install dependencies
      if: ${{ matrix.os == 'macos-13' || matrix.os == 'macos-14' || matrix.os == 'macos-15' }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install git+https://github.com/pylint-dev/pylint-django.git
        python -m uv pip install --prerelease=allow -r requirements.txt
    - name: Install dependencies on Windows
      if: ${{ matrix.os == 'windows-2019' || matrix.os == 'windows-2022' }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install git+https://github.com/pylint-dev/pylint-django.git
        python -m uv pip install -r requirements.txt
    - name: Install dependencies on Ubuntu
      if: ${{ matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04' }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install git+https://github.com/pylint-dev/pylint-django.git
        python -m uv pip install -r requirements.txt
    - name: Analysing the code with pylint
      run: pylint --load-plugins pylint_django --django-settings-module=lab.settings "**/*.py"
